

# vagga configuration for a cross rust dev environment
# The container will compile rust for a target other than the container's host.
# E.g. target is embedded computer having such as ARM ISA

# Using a chain of containers.
# Checkpoints containers so they don't rebuild when one fails to install
# Each more  specific than its parent
# In the order of likelihood to fail (most stable containers first.)


containers:

  # basic container having C language tools
  
  base:
  
    setup:
    - !Ubuntu xenial
    
    # !!! Add repositories/ppa's for some "interesting" packages such as gcc-arm-none-eabi
    # - !UbuntuUniverse

    # C compiler and other tools
    # overkill? but still doesn't install curl?
    - !Install [build-essential, ca-certificates]

    # Subsequent containers (rustup) need curl
    - !Install [curl]
    
    # Subsequent containers optionally use git
    - !Install [git]



  
  
  # container having rustup
  # rustup is toolchain mulitplexer (nightly and other versions of rust tools).
  # cargo will not install rustup; rustup installs cargo.
  
  # An alternative is to install a single version of rust from a binary distribution.
  
  # Rustup installation installs not only rustup, but a (first) version of rust tools.
  # Default to version: nightly (i.e. unstable).
  
  # We choose nightly because cross compiling requires it (as of this writing.)
  
  rustup:
  
    # Use yaml alias (anchor) "environ" to be referenced later by "*environ"
    environ: &environ
      PATH: "/work/.home/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      HOME: /work/.home
      RUSTUP_HOME: /work/.home/.rustup
      CARGO_HOME: /work/.home/.cargo
      # the path to target specification files, i.e. armfoo.json
      # RUST_TARGET_PATH: /work/.home
      
    setup:
    
    # depends on previous container
    - !Container base
    
    # rustup.sh is deprecated, use rustup.rs which downloads and runs rustup-init
    
    # Configure rustup-init with env vars in environ of build
    # Unless these are set in build env, installs to /tmp/.rustup and it goes away
    - !Env
      RUST_TARGET_PATH: /work/.home
      RUSTUP_HOME: /work/.home/.rustup
      CARGO_HOME: /work/.home/.cargo
      
    - !Download
      url: https://sh.rustup.rs
      path: /work/rustup.rs
      mode: 0o744
      
    - !Sh "/work/rustup.rs -y --default-toolchain nightly"
    
    - !Sh "ls -R"
 
 
 
 
  # Cross compiling using xargo requires rust src
  
  rustupWSource:
    environ: *environ
      
    setup:
    - !Container rustup
    
    - !Env
      PATH: "/work/.home/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      RUST_TARGET_PATH: /work/.home
      
    - !Sh "rustup component add rust-src"
  
  
  
  
  # container having cargo's clone subcommand
  
  rustupWSourceAndClone:
    environ: *environ
    
    setup:
      # depends on previous container
      - !Container rustupWSource
  
      # cargo-clone requires pkg-config to find OpenSSL library
      - !Install [pkg-config]
      
      # cargo-clone build uses cmake
      - !Install [cmake]
      
      # cargo-clone requires openssl library
      - !Install [libssl-dev]
      
      # clone subcommand is not installed in default  Rust installation
      - !Sh "cargo install cargo-clone --force"
      
      # mv from build dir /tmp
      # - !Sh "mv /tmp/.cargo/bin/cargo-clone /usr/bin"
  
      



  # container for cross compiling Rust to any target
  # i.e. having xargo
  # installing xargo does not require source or clone
  # running xargo requires source
  
  rustCrossDev:
  
    environ: *environ
    
    setup:
    - !Container rustupWSourceAndClone
    
    # env of build
    - !Env
      PATH: "/work/.home/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      RUST_TARGET_PATH: /work/.home
    
    - !Sh "which xargo"
    
    # install Xargo (cross compiling helper) from crate.io
    # --force overwrites previous installation
    - !Sh "cargo install xargo --force"
   
    
  
  
  # container for cross compiling Rust to a specific target family: ARM Cortex M family
  # E.g. having demo source
  # E.g. where demo source has a board package for ARM?
  
  rustCortexM:
  
    environ: *environ
    
    
    #  RUST_BACKTRACE: 1
      
    setup:
    # depends on previous container
    - !Container rustCrossDev

    
    # This is cruft only necessary if env variable for various homes are not correct
    # cargo seems to want to put .cargo_lock in read only /root?
    # so redirect home directory of user root to a writeable directory
    # - !Sh "sed -i '/^root/{s@/root@/work/.home@;}' /etc/passwd"
    
    # remove previously installed stuff
    # !!! This deletes any hacks you made
    # -f no prompts, and ignore if not exist
    - !Sh "rm -Rf cortex-m-quickstart"
    - !Sh "rm -Rf demo"
    
    # fetch source of crate 
    # from official rust repository crates.io
    # to /work
    - !Sh "cargo clone cortex-m-quickstart --vers 0.1.1"
    
    # rename so we can hack
    - !Sh "mv cortex-m-quickstart demo"
    
    # TODO futz with Cargo.toml metadata to reflect new author
    - !Sh "sed -i 's/cortex-m-quickstart/demo/g' demo/Cargo.toml"
    
    # xargo needs source, assert already installed
  
    # cargo seems to want to put .cargo_lock in /root?
    #volumes:
       #/root: !BindRW /work/tmp
    
    # install target into rust toolchain
    # This looks for a binary in the distribution for core and std libs.
    # Not needed, since xargo will build said libs.
    #- !Sh "rustup target add thumbv7m-none-eabi"
    
    
    # configure default target for build so can omit --target flag on builds
    # the target must be in listTargets
    - !Text
      /work/.home/.cargo/config: |
        [build]
        target = "thumbv7m-none-eabi"
    
    - !Sh "ls -R"


  

commands:


  # Conventional commands
  # Purpose should be to run and test ultimate project artifact, an application
  
  # !!! Not working
  test: !Command
    description: Test build hello for Cortex M
    container: rustCortexM
    run: |
      cd demo
      xargo test
  
  # seems to build something successfully, a library?
  # seems to build "build.rs"
  run: !Command
    description: build demo
    container: rustCortexM
    run: |
      which xargo
      cd demo
      xargo build --target thumbv7m-none-eabi -v
      # thumbv6m-none-eabi IS supported by rustc distribution, i.e. in listTargets
      # thumbv7m-none-eabi
      # x86_64-unknown-linux-gnu
      
  # !!! Not working
  hello: !Command
    description: build demo example hello
    container: rustCortexM
    run: |
      cd demo
      xargo build --example hello
      
  
  hello2: !Command
    description: build demo example hello
    container: rustCortexM
    run: |
      cd demo
      cp examples/hello.rs ..
      xargo build
      
  # TODO Build blinky, burn to target, and run remote debugger
      
      
      
      
  # Commands to test container sanity
  
  testCargo: !Command
    description: Test cargo is installed in container rustNightlyDev
    container: rustNightlyDev
    run: |
      which cargo
      cargo --version
  
  testCargoInRustup: !Command
    description: Test cargo is installed in container rustup
    container: rustup
    run: |
      which cargo
      cargo --version
      
  testRustup: !Command
    description: Test rustup is installed in container rustup
    container: rustup
    run: |
      which rustup
      rustup --version
      
  testRustc: !Command
    description: Test rustc is installed in container rustup
    container: rustup
    run: |
      env
      which rustc
      rustc -vV
    
  testVersion: !Command
    description: Test rustc-version
    container: rustTestVersion
    run: |
      env
      which rustc
      rustc -vV
    
    
  testXargo: !Command
    description: Test xargo is installed in container rustCrossDev
    container: rustCrossDev
    run: |
      which xargo
      rustc -vV
      # xargo --version
      
  testCore: !Command
    description: Test xargo will build core
    container: rustCrossDev
    run: |
      xargo build --target thumbv6m-none-eabi -v
      rustup target list
            
  testPkgConfig: !Command
    description: Test pkg-config is installed and will find openssl in container rustCrossDev2
    container: rustCrossDev2
    run: |
      which pkg-config
      pkg-config --libs --cflags openssl



  # Commands to help debug containters

  list: !Command
    description: List container's root directory, recursive
    container: rustCrossDev
    run: |
      ls -R /
  
  listTargets: !Command
    description: List targets precompiled by Rust
    container: rustCrossDev
    run: |
      rustc --print target-list

  # This doesn't seem to work, maybe xargo is not log enabled
  catRustLog: !Command
    description: invoke xargo to build sysroot with logging enabled
    container: rustCrossBareARMDev
    run: |
      RUST_LOG=xargo xargo --target foo

  listSysroot: !Command
    description: List sysroot i.e. system crates
    container: rustCrossBareARMDev
    run: |
      rustc --print sysroot



  # Not working???
  findXargo: !Command
    description: Find xargo
    container: rustCrossDev
    run: |
      "find / -name xargo"
      
    
      
  env: !Command
    description: List env of rustDev
    container: rustDev
    run: |
      env
      
  listDemo: !Command
    description: List demo directory of rustCortexM
    container: rustCortexM
    run: |
      ls -al /work/demo
     
     
        
  
    #- !Sh "ls -alR /tmp"
    #- !Sh "ls -R"
    
    # cargo installs to $CARGO_HOME/.cargo/bin but falls back to /tmp/.cargo/bin if CARGO_HOME is not defined???
    # cargo installs generated artifacts to $CARGO_TARGET_DIR but defaults to /tmp?
    # Here, define CARGO_HOME, because /tmp seems to get cleared
 