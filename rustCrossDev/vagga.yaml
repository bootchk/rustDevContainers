

# vagga configuration for a cross rust dev environment
# compiles rust for a target other than the container's host

# Using a chain of containers.
# Checkpoints containers so they don't rebuild when one fails to install
# Each more  specific than its parent


containers:

  # basic container having C language tools
  
  base:
  
    setup:
    - !Ubuntu xenial
    
    # !!! Add repositories/ppa's for some "interesting" packages such as gcc-arm-none-eabi
    # - !UbuntuUniverse

    # C compiler and other tools
    # overkill? but still doesn't install curl?
    - !Install [build-essential, ca-certificates]

    # rustup.sh invokes curl
    # BuildDeps is temporary to container, Install is permanent
    # - !BuildDeps [curl]



  # container having Rust language tools
  # compiling to host target only
  
  rustStableDev:
  
    environ: &rustenv
      LD_LIBRARY_PATH: /musl/lib/rustlib/x86_64-unknown-linux-musl/lib
      PATH: /musl/bin:/usr/local/bin:/usr/bin:/bin
      HOME: /work/target
      # CARGO_HOME: /work/target/.cargo

    setup:
      # depends on previous container
      - !Container base
      
      
      # container's more permanent env
      # !!! Rust installs to ~/.cargo/bin
      #environ:
      #  PATH: "/work/.home/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      #  HOME: "/work/.home"
      # Create dir where Rust installs
      #- !EnsureDir /work/.home
      
      # rustup install script
      #- !Download
      #  url: https://sh.rustup.rs
      #  path: /rustup.sh
      #  mode: 0o744
      #- !Sh "/rustup.sh -y"
      #- !Remove /rustup.sh
    
      # install stable Rust release
      - !TarInstall
        url: "https://static.rust-lang.org/dist/rust-1.20.0-x86_64-unknown-linux-gnu.tar.gz"
        script: "./install.sh --prefix=/usr --components=rustc,rust-std-x86_64-unknown-linux-gnu,cargo"
 
      # - !Sh "ls -R"
      
  
  
  # container having rustup
  
  
  rustup:
  
    environ:
      PATH: "/work/.home/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      HOME: /work/.home
      RUSTUP_HOME: /work/.home
      
      # RUSTUP_HOME determines where rustup installs???
      
    setup:
    
    # depends on previous container
    - !Container base
  
    # 
    - !Install [curl]
    
    # Used by rustup.sh
    #- !BuildDeps [file]
    # sudo used by rustup.sh but can't be removed
    #- !Install [sudo]
    
    
    # rustup.sh is deprectated, use rustup.rs
    
    # This is the deprecated stuff
    # - !Sh "curl -f -L https://static.rust-lang.org/rustup.sh -O"
    # - !Sh "chmod +x /work/rustup.sh"
    # - !Sh "/work/rustup.sh --channel=nightly"
    
    # One way to do it, but not working?
    # - !Sh "curl https://sh.rustup.rs -sSf | sh"    --channel=nightly"
    
    # Two step procedure?
    #- !Sh "curl https://sh.rustup.rs -sSf -O"
    #- !Sh "chmod +x /work/rustup.rs"
    #- !Sh "/work/rustup.rs --default-toolchain nightly"
    
    
    - !Env
      RUST_TARGET_PATH: /work/.home
      
    - !Download
      url: https://sh.rustup.rs
      path: /work/rustup.rs
      mode: 0o744
    - !Sh "/work/rustup.rs -y --default-toolchain nightly"
    
    # Unless ?? is set in env, installs to /tmp/.rustup and it goes away???
    
    # - !Sh "/work/rustup.rs component add rust-src"
    
    # rustup is not in the manifest for nightly?
    # - !Sh "which rustup"
    
    # rustup is not installable by cargo
    # - !Sh "cargo install rustup"
  
    - !Sh "ls -alR /tmp"
  
  
  
  
  # container for nightly unstable Rust
  # required for cross compiling
  
  rustNightlyDev:
  
    environ: &rustenv
      HOME: /work/target
      
    setup:
      # depends on previous container
      - !Container rustup
      
      - !Sh "rustup "
      
      
      
      

  # container for cross compiling Rust to any target
  rustCrossDev:
  
    # cargo installs to $CARGO_HOME/.cargo/bin but falls back to /tmp/.cargo/bin if CARGO_HOME is not defined???
    # cargo installs generated artifacts to $CARGO_TARGET_DIR but defaults to /tmp?
    # Here, define CARGO_HOME, because /tmp seems to get cleared
    environ:
      # PATH: /tmp/.cargo/bin:/musl/bin:/usr/local/bin:/usr/bin:/bin
      CARGO_HOME: /work/target/.cargo
      
    setup:
    # depends on previous container
    - !Container rustNightlyDev
    
    # install Xargo (cross compiling helper)
    - !Sh "cargo install xargo"
    
    # it installed to /tmp/...  , which goes away, so move it to where cargo binary is installed
    - !Sh "mv /tmp/.cargo/bin/xargo /usr/bin"
    
    #- !Sh "ls -R"
    
  
  
  # Beefed up rustCrossDev, having cargo clone subcommand
  
  rustCrossDev2:
    setup:
      # depends on previous container
      - !Container rustCrossDev
  
      # cargo-clone requires pkg-config to find OpenSSL library
      - !Install [pkg-config]
      
      # cargo-clone build uses cmake
      - !Install [cmake]
      
      # cargo-clone requires openssl library
      - !Install [libssl-dev]
      
      # clone subcommand is not installed in default  Rust installation
      - !Sh "cargo install cargo-clone"
      
      # mv from build dir /tmp
      - !Sh "mv /tmp/.cargo/bin/cargo-clone /usr/bin"
  
  
  
  # container for cross compiling Rust to a target in ARM Cortex M family
  rustCortexM:
  
    setup:
    # depends on previous container
    - !Container rustCrossDev2
    
    # cargo seems to want to put .cargo_lock in read only /root?
    # so redirect home directory of user root to a writeable directory
    - !Sh "sed -i '/^root/{s@/root@/work/.home@;}' /etc/passwd"
    
    # remove previously installed stuff
    # !!! This deletes any hacks you made
    # -f no prompts, and ignore if not exist
    - !Sh "rm -Rf cortex-m-quickstart"
    - !Sh "rm -Rf demo"
    
    # fetch source of crate 
    # from official rust repository crates.io
    # to /work
    - !Sh "cargo clone cortex-m-quickstart --vers 0.1.1"
    
    # rename so we can hack
    - !Sh "mv cortex-m-quickstart demo"
    
    # TODO futz with Cargo.toml metadata to reflect new author
    - !Sh "sed -i 's/cortex-m-quickstart/demo/g' demo/Cargo.toml"
    
    # xargo wants source
    - !Sh "rustup component add rust-src"
  
  # cargo seems to want to put .cargo_lock in /root?
    #volumes:
       #/root: !BindRW /work/tmp
   
    



  

commands:


  # Conventional commands
  # Purpose should be to run and test ultimate project artifact, an application
  
  test: !Command
    description: Test build hello for Cortex M
    container: rustCortexM
    run: |
      cd demo
      xargo build --example hello
  
  
  run: !Command
    description: Build blinky, burn to target, and run remote debugger
    container: rustCrossDev
    run: |
      xargo build --target thumbv7m-none-eabi
      
      
      
  # Commands to test container sanity
  
  testCargo: !Command
    description: Test cargo is installed in container rustNightlyDev
    container: rustNightlyDev
    run: |
      which cargo
      cargo --version
  
  testCargoInRustup: !Command
    description: Test cargo is installed in container rustup
    container: rustup
    run: |
      which cargo
      cargo --version
      
  testRustup: !Command
    description: Test rustup is installed in container rustup
    container: rustup
    run: |
      which rustup
      rustup --version
    
    
  testXargo: !Command
    description: Test xargo is installed in container rustCrossDev
    container: rustCrossDev
    run: |
      which xargo
      xargo --version
      
  testPkgConfig: !Command
    description: Test pkg-config is installed and will find openssl in container rustCrossDev2
    container: rustCrossDev2
    run: |
      which pkg-config
      pkg-config --libs --cflags openssl



  # Commands to help debug containters

  list: !Command
    description: List container's root directory, recursive
    container: rustCrossDev
    run: |
      ls -R /
  
  listTargets: !Command
    description: List targets precompiled by Rust
    container: rustCrossARMDev
    run: |
      rustc --print target-list

  # This doesn't seem to work, maybe xargo is not log enabled
  catRustLog: !Command
    description: invoke xargo to build sysroot with logging enabled
    container: rustCrossBareARMDev
    run: |
      RUST_LOG=xargo xargo --target foo

  listSysroot: !Command
    description: List sysroot i.e. system crates
    container: rustCrossBareARMDev
    run: |
      rustc --print sysroot



  # Not working???
  findXargo: !Command
    description: Find xargo
    container: rustCrossDev
    run: |
      "find / -name xargo"
      
    
      
  env: !Command
    description: List env of rustDev
    container: rustDev
    run: |
      env
      
  listDemo: !Command
    description: List demo directory of rustCortexM
    container: rustCortexM
    run: |
      ls -al /work/demo
      
 